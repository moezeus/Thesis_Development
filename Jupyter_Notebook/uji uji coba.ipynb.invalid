{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "finite-houston",
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "confident-subscriber",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(-1, -1, -1),\n",
       " (-1, -1, 1),\n",
       " (-1, 1, -1),\n",
       " (-1, 1, 1),\n",
       " (1, -1, -1),\n",
       " (1, -1, 1),\n",
       " (1, 1, -1),\n",
       " (1, 1, 1)]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist_comb = list(itertools.product([-1, 1], repeat=3))\n",
    "dist_comb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "collected-madonna",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dist_comb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "paperback-airfare",
   "metadata": {},
   "outputs": [],
   "source": [
    "from shapely.geometry import Polygon\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cordless-durham",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 0\n",
    "y = 0\n",
    "phi = 30\n",
    "Lp = 5\n",
    "Wp = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "parallel-malawi",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 0\n",
    "y = 0\n",
    "phi = 3.14 #rad\n",
    "Lp = 5\n",
    "Wp = 2\n",
    "Egorec = Polygon([[x - Lp/2*math.cos(phi) + Wp/2*math.sin(phi), \n",
    "          y - Lp/2*math.sin(phi) - Wp/2*math.cos(phi)],\n",
    "        [x - Lp/2*math.cos(phi) - Wp/2*math.sin(phi),\n",
    "         y - Lp/2*math.sin(phi) + Wp/2*math.cos(phi)],\n",
    "        [x + Lp/2*math.cos(phi) - Wp/2*math.sin(phi),\n",
    "         y + Lp/2*math.sin(phi) + Wp/2*math.cos(phi)],\n",
    "        [x + Lp/2*math.cos(phi) + Wp/2*math.sin(phi),\n",
    "         y + Lp/2*math.sin(phi) - Wp/2*math.cos(phi)]])\n",
    "upperbound = Polygon([(-4,2),(-4,3),(4,3),(4,2)])\n",
    "lowerbound = Polygon([(-4,-3),(-4,-2),(4,-2),(4,-3)])\n",
    "# Egorec\n",
    "# upperbound\n",
    "# lowerbound"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "saving-message",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False False\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfAAAAD0CAYAAABkSnREAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAPaklEQVR4nO3df4jc9Z3H8dfrkhSLevhHcmxrsrfCBSGYuF4HaWvhctYeac82tHcFzV0PaWE5OMEDQZoLVEoRCkLPPywty1VyxyUthTZYrKKRxkihWne9MT9MLLbgGTFk26NWEVqi7/tjZp3NdH/m+8n3O++Z5wMW9/Od2c/n/WGc72s+n/nOxBEhAACQy580XQAAAFg7AhwAgIQIcAAAEiLAAQBIiAAHACCh9U0MunHjxpiYmGhiaAAAUpmdnf11RGzqP95IgE9MTGhmZqaJoQEASMX2K4sdZwsdAICECHAAABIiwAEASIgABwAgIQIcAICEKge47cts/9z2C7ZP2v5qicIAAMDSSnyM7PeSbo6It2xvkPRT249FxDMF+gYAAIuoHODR+fdI3+o2N3R/av03Sqdnp3Xw+ME6hwQA4I/s2b5HUx+aqmWsIu+B215nuy3pnKTDEfHsIveZsj1je2Zubq7EsO85ePyg2mfbRfsEAGAt2mfbtS4mi3wTW0S8I2nS9lWSDtm+LiJO9N1nWtK0JLVareIr9MmxST11x1OluwUAYFV27t9Z63hFr0KPiN9KOiJpV8l+AQDAhUpchb6pu/KW7fdL+oSk01X7BQAASyuxhf4BSf9pe506Lwi+HxGPFOgXAAAsocRV6Mck3VCgFgAAsEp8ExsAAAkR4AAAJESAAwCQEAEOAEBCBDgAAAkR4AAAJESAAwCQEAEOAEBCBDgAAAkR4AAAJESAAwCQEAEOAEBCBDgAAAkR4AAAJESAAwCQEAEOAEBCBDgAAAkR4AAAJESAAwCQEAEOAEBCBDgAAAkR4AAAJESAAwCQUOUAt73F9hHbL9o+afuuEoUBAIClrS/Qx3lJd0fE87avlDRr+3BEvFigbwAAsIjKAR4Rr0t6vfv7m7ZPSbpaUm0BfvSVo5Kknft31jUkAAAXaJ9ta3Jssrbxir4HbntC0g2Snl3ktinbM7Zn5ubmSg4LAEDjJscmtWf7ntrGc0SU6ci+QtJRSfdFxA+Xu2+r1YqZmZki4wIAMMxsz0ZEq/94kRW47Q2SfiDpwErhDQAAqitxFbolfUfSqYj4RvWSAADASkqswG+S9AVJN9tud38+VaBfAACwhBJXof9UkgvUAgAAVolvYgMAICECHACAhAhwAAASIsABAEiIAAcAICECHACAhAhwAAASIsABAEiIAAcAICECHACAhAhwAAASIsABAEiIAAcAICECHACAhAhwAAASIsABAEiIAAcAICECHACAhAhwAAASIsABAEiIAAcAICECHACAhAhwAAASIsABAEioSIDbfsj2OdsnSvQHAACWt75QP/slPSjpvwr1h7r85jfS229feMymXarddC0AhlaRAI+Ip21PlOgLNTp+XLr+eimi6UpQl6ZfUNAe3Pb877/8Zee/nBcGXqkV+IpsT0makqTx8fG6hsVyzp3rPEnvuUfaurV3vP+JSztXexBqoJ23PR/gGHi1BXhETEualqRWq8VLu0Ew/6T99Kelj32s2VoADIbNm6UHHmi6CqwCV6GPsvkA531TAPPYOk+DAAcA9ETwoj6JUh8j+66kn0m61vYZ218q0S8uMVbgABbDOSGFUleh316iH9SMrTIA/TgvpMEWOni1DaCHLfQ0CPBRxhY6gMVwTkiBAB9lbJUB6Md5IQ0CHLzaBtDDFnoaBPgoYwsdwGI4J6RAgI8ytsoA9OO8kAYBDl5tA+hhCz0NAnyUsYUOYDGcE1IgwEcZW2UA+nFeSIMAB6+2AfSwhZ4GAT7K2EIHsBjOCSkQ4KOMrTIA/TgvpEGAg1fbAHrYQk+DAB9lbKEDWAznhBQI8FHGVhmAfpwX0iDAwattAD1soadBgI8yttABLIZzQgoE+ChjqwxAP84LaRDg4NU2gB620NMgwEcZr7QBIC0CfJTxHjiAfqzA0yDAwZMVQA8BngYBPsrYQgeAtIoEuO1dtl+y/bLtL5foEzVgCx1AP1bgaVQOcNvrJH1T0iclbZN0u+1tVftFjXiyAphHgKdRYgV+o6SXI+JXEfEHSd+TtLtAv7jU2EIHgLRKBPjVkl5d0D7TPXYB21O2Z2zPzM3NFRgWlbGFDqAfK/A0aruILSKmI6IVEa1NmzbVNSxWgycrgHkEeBolAvw1SVsWtDd3j2HQsYUOAGmVCPDnJG21fY3t90m6TdKPCvSLS40tdAD9WIGnsb5qBxFx3vadkh6XtE7SQxFxsnJlqA9PVgDzCPA0Kge4JEXEo5IeLdEXasQWOgCkxTexjTK20AH0YwWeBgEOnqwAegjwNAjwUcYWOgCkRYCPMrbQAfRjBZ4GAQ6erAB6CPA0CPBRxhY6AKRFgI8yttAB9GMFngYBDgDoIcDTIMBHGStwAEiLAB9lBDiAfqzA0yDAAQA9BHgaBPgoYwUOAGkR4KOMAAfQjxV4GgQ4AKCHAE+DAB9lrMABIC0CfJQR4AD6sQJPgwAHAPQQ4GkQ4KOMFTgApEWAjzICHEA/VuBpEOAAgB4CPA0CfJSxAgeAtAjwUUaAA+jHCjwNAhwA0EOAp1EpwG1/3vZJ2+/abpUqCjVhBQ4AaVVdgZ+Q9DlJTxeoBXWbD3AAmMcKPI31Vf44Ik5Jknmwc/vWt6Qrrrjw2MLHtP/xHeX2INUyaO1BqqXp9iDVstb2G28IOVQK8LWwPSVpSpLGx8frGhbLGR/vPHHvvbfpSgAMko9+tOkKsAorBrjtJyWNLXLTvoh4eLUDRcS0pGlJarVa7N0Ogt27pTfflN55p3esf1u9yfYg1UKbx3KU2jt2CINvxQCPiFvqKAQNufzypisAAFwEPkYGAEBCVT9G9lnbZyR9RNKPbT9epiwAALCcqlehH5J0qFAtAABgldhCBwAgIQIcAICECHAAABIiwAEASIgABwAgIQIcAICECHAAABIiwAEASIgABwAgIQIcAICECHAAABIiwAEASIgABwAgIQIcAICECHAAABIiwAEASIgABwAgIQIcAICECHAAABIiwAEASIgABwAgIQIcAICECHAAABIiwAEASKhSgNu+3/Zp28dsH7J9VanCAADA0qquwA9Lui4idkj6haS91UsCAAArWV/ljyPiiQXNZyT9fbVyLs707LQOHj/YxNAAALxnz/Y9mvrQVC1jlXwP/IuSHlvqRttTtmdsz8zNzRUcVjp4/KDaZ9tF+wQAYC3aZ9u1LiZXXIHbflLS2CI37YuIh7v32SfpvKQDS/UTEdOSpiWp1WrFRVW7jMmxST11x1OluwUAYFV27t9Z63grBnhE3LLc7bbvkHSrpI9HRPFgBgAAf6zSe+C2d0m6R9JfRcTbZUoCAAArqfoe+IOSrpR02Hbb9rcL1AQAAFZQ9Sr0vyhVCAAAWD2+iQ0AgIQIcAAAEiLAAQBIiAAHACAhAhwAgIQIcAAAEiLAAQBIiAAHACAhAhwAgIQIcAAAEiLAAQBIiAAHACAhAhwAgIQIcAAAEiLAAQBIiAAHACAhAhwAgIQIcAAAEiLAAQBIiAAHACAhAhwAgIQIcAAAEiLAAQBIqFKA2/6a7WO227afsP3BUoUBAIClVV2B3x8ROyJiUtIjkr5SoCYAALCC9VX+OCJ+t6B5uaSoVs7FOfrKUUnSzv07mxgeAAC1z7Y1OTZZ23iVAlySbN8n6Z8kvSHpr5e535SkKUkaHx+vOiwAAANlcmxSe7bvqW08Ryy/aLb9pKSxRW7aFxEPL7jfXkmXRcS9Kw3aarViZmZmrbUCADBybM9GRKv/+Ior8Ii4ZZVjHJD0qKQVAxwAAFRT9Sr0rQuauyWdrlYOAABYjarvgX/d9rWS3pX0iqR/rl4SAABYSdWr0P+uVCEAAGD1+CY2AAASIsABAEiIAAcAICECHACAhFb8IpdLMqg9p85V6yVtlPTrwn02adjmIw3fnJjP4Bu2OTGfwXcp5vTnEbGp/2AjAX4p2J5Z7Jtqshq2+UjDNyfmM/iGbU7MZ/DVOSe20AEASIgABwAgoWEK8OmmCyhs2OYjDd+cmM/gG7Y5MZ/BV9uchuY9cAAARskwrcABABgZBDgAAAkNZYDbvtt22N7YdC1V2P6a7WO227afsP3Bpmuqwvb9tk9353TI9lVN11SV7c/bPmn7XdtpPw5je5ftl2y/bPvLTddTle2HbJ+zfaLpWkqwvcX2Edsvdv9/u6vpmqqwfZntn9t+oTufrzZdUwm219n+H9uP1DHe0AW47S2S/kbS/zZdSwH3R8SOiJiU9IikrzRdUEWHJV0XETsk/ULS3obrKeGEpM9JerrpQi6W7XWSvinpk5K2Sbrd9rZmq6psv6RdTRdR0HlJd0fENkkflvQvyR+j30u6OSKulzQpaZftDzdcUwl3STpV12BDF+CS/l3SPZLSX50XEb9b0LxcyecUEU9ExPlu8xlJm5usp4SIOBURLzVdR0U3Sno5In4VEX+Q9D1JuxuuqZKIeFrS/zVdRykR8XpEPN/9/U11QuLqZqu6eNHxVre5ofuT+vxme7Okv5X0H3WNOVQBbnu3pNci4oWmaynF9n22X5X0D8q/Al/oi5Iea7oISOoEwasL2meUOByGne0JSTdIerbZSqrpbje3JZ2TdDgiUs9H0gPqLB7frWvA9XUNVIrtJyWNLXLTPkn/ps72eRrLzSciHo6IfZL22d4r6U5J99Za4BqtNJ/uffapsyV4oM7aLtZq5gTUwfYVkn4g6V/7dujSiYh3JE12r4U5ZPu6iEh5zYLtWyWdi4hZ2zvrGjddgEfELYsdt71d0jWSXrAtdbZnn7d9Y0ScrbHENVlqPos4IOlRDXiArzQf23dIulXSxyPJlxCs4THK6jVJWxa0N3ePYYDY3qBOeB+IiB82XU8pEfFb20fUuWYhZYBLuknSZ2x/StJlkv7U9n9HxD9eykGHZgs9Io5HxJ9FxERETKizDfiXgxzeK7G9dUFzt6TTTdVSgu1d6mwxfSYi3m66HrznOUlbbV9j+32SbpP0o4ZrwgLurEq+I+lURHyj6Xqqsr1p/lMott8v6RNKfH6LiL0RsbmbPbdJ+smlDm9piAJ8SH3d9gnbx9R5ayD1R0ckPSjpSkmHux+N+3bTBVVl+7O2z0j6iKQf23686ZrWqnth4Z2SHlfn4qjvR8TJZquqxvZ3Jf1M0rW2z9j+UtM1VXSTpC9Iurn73Gl3V3tZfUDSke657Tl13gOv5aNXw4SvUgUAICFW4AAAJESAAwCQEAEOAEBCBDgAAAkR4AAAJESAAwCQEAEOAEBC/w9B8MMzs1xklwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 504x252 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from shapely.geometry import Polygon\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams[\"figure.figsize\"] = [7.00, 3.50]\n",
    "plt.rcParams[\"figure.autolayout\"] = True\n",
    "\n",
    "x1, y1 = Egorec.exterior.xy\n",
    "x2, y2 = upperbound.exterior.xy\n",
    "x3, y3 = lowerbound.exterior.xy\n",
    "\n",
    "print((Egorec.intersects(upperbound)),(Egorec.intersects(lowerbound)))\n",
    "\n",
    "plt.plot(x1, y1, c='red')\n",
    "plt.plot(x2, y2, c='green')\n",
    "plt.plot(x3, y3, c='green')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "entitled-digest",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Failed to load Python extension for LZ4 support. LZ4 compression will not be available.\n"
     ]
    }
   ],
   "source": [
    "import rosbag\n",
    "import matplotlib.pyplot as plt \n",
    "import numpy as np\n",
    "from scipy.signal import savgol_filter\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "adapted-installation",
   "metadata": {},
   "outputs": [],
   "source": [
    "bag1 = rosbag.Bag('waypoint/cek_posisi.bag')\n",
    "bag1.get_type_and_topic_info()\n",
    "content0 = []\n",
    "content1 = []\n",
    "content2 = []\n",
    "content3 = []\n",
    "content4 = []\n",
    "content5 = []\n",
    "# print(bag1)\n",
    "# input_steer = []\n",
    "for topic, msg, _ in bag1.read_messages(topics=['/ego_pose']):\n",
    "    content0.append(msg)\n",
    "    content1.append(msg.pose.pose.orientation.x)\n",
    "    content2.append(msg.pose.pose.orientation.y)\n",
    "    content3.append(msg.pose.pose.orientation.z)\n",
    "    content4.append(msg.pose.pose.orientation.w)\n",
    "#     content1.append(msg.markers[1].pose.position)\n",
    "#     content2.append(msg.markers[2].pose.position)\n",
    "#     content3.append(msg.markers[3].pose.position)\n",
    "#     content4.append(msg.markers[4].pose.position)\n",
    "#     content5.append(msg.markers[5].pose.position)\n",
    "# print(content0[0])\n",
    "\n",
    "# print(content5[0].x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "humanitarian-horse",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[vehicle_id: \"left_16\"\n",
      "pos_x: 156.7082061767578\n",
      "pos_y: 117.57597351074219\n",
      "heading: 1.7837213277816772\n",
      "velocity: 0.31667089462280273\n",
      "max_vel: 10.0\n",
      "lane: 1\n",
      "signals: 10, vehicle_id: \"left_15\"\n",
      "pos_x: 133.0838623046875\n",
      "pos_y: 119.80000305175781\n",
      "heading: 1.5707963705062866\n",
      "velocity: 5.052753448486328\n",
      "max_vel: 10.0\n",
      "lane: 0\n",
      "signals: 0, vehicle_id: \"left_19\"\n",
      "pos_x: 187.34593200683594\n",
      "pos_y: 119.80000305175781\n",
      "heading: 1.5707963705062866\n",
      "velocity: 4.0050225257873535\n",
      "max_vel: 10.0\n",
      "lane: 0\n",
      "signals: 0, vehicle_id: \"right_18\"\n",
      "pos_x: 177.6089630126953\n",
      "pos_y: 116.5999984741211\n",
      "heading: 1.5707963705062866\n",
      "velocity: 3.650095224380493\n",
      "max_vel: 10.0\n",
      "lane: 1\n",
      "signals: 8, vehicle_id: \"broken_2\"\n",
      "pos_x: 149.0\n",
      "pos_y: 119.80000305175781\n",
      "heading: 1.5707963705062866\n",
      "velocity: 0.0\n",
      "max_vel: 10.0\n",
      "lane: 0\n",
      "signals: 0, vehicle_id: \"right_17\"\n",
      "pos_x: 165.58395385742188\n",
      "pos_y: 116.5999984741211\n",
      "heading: 1.5707963705062866\n",
      "velocity: 1.281846523284912\n",
      "max_vel: 10.0\n",
      "lane: 1\n",
      "signals: 8, vehicle_id: \"prius\"\n",
      "pos_x: 223.69927978515625\n",
      "pos_y: 119.80000305175781\n",
      "heading: 1.5575867891311646\n",
      "velocity: 0.004580898210406303\n",
      "max_vel: 10.0\n",
      "lane: 0\n",
      "signals: 8, vehicle_id: \"left_20\"\n",
      "pos_x: 194.89999389648438\n",
      "pos_y: 119.80000305175781\n",
      "heading: 1.5707963705062866\n",
      "velocity: 0.0\n",
      "max_vel: 10.0\n",
      "lane: 0\n",
      "signals: 0]\n"
     ]
    }
   ],
   "source": [
    "bag2= rosbag.Bag('waypoint/cek_posisi.bag')\n",
    "# bag1.get_type_and_topic_info()\n",
    "veh = []\n",
    "# print(bag2)\n",
    "# input_steer = []\n",
    "for topic, msg, _ in bag2.read_messages(topics=['/vehicles_status']):\n",
    "    veh.append(msg.VehiclesDetected)\n",
    "print(veh[0])\n",
    "# print(veh[0][0].vehicle_id)\n",
    "# type(veh[0][0].vehicle_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "promising-substitute",
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_euler(x, y, z, w):\n",
    "    \"\"\"Return as xyz (roll pitch yaw) Euler angles.\"\"\"\n",
    "    roll = np.arctan2(2 * (w * x + y * z), 1 - 2 * (x**2 + y**2))\n",
    "    pitch = np.arcsin(2 * (w * y - z * x))\n",
    "    yaw = np.arctan2(2 * (w * z + x * y), 1 - 2 * (y**2 + z**2))\n",
    "    return np.array([roll, pitch, yaw])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "another-drilling",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.00011863282119161914"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "useful-nelson",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-4.85841145e-07,  2.37291032e-04,  3.12840239e+00])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_euler(content1[0],content2[0],content3[0],content4[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3784d9c8-e293-4095-a66d-424715db40cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import numpy.matlib\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6e78d95f-edc7-4f95-a53f-cc3dba7c2c81",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.linalg\n",
    "import itertools\n",
    "\n",
    "def get_params():\n",
    "    class Bunch:\n",
    "        def __init__(self, **kwds):\n",
    "            self.__dict__.update(kwds)\n",
    "    \n",
    "    # Declare constant parameters\n",
    "    params = Bunch(\n",
    "                w_lane = 4,          # (m) lane width\n",
    "                l_car = 5 ,          # (m) car length\n",
    "                w_car = 2 ,          # (m) car width\n",
    "                l_road = 4000,       # (m)\n",
    "                v_nominal = 70/3.6,  # (m/s) nominal car speed  \n",
    "                v_max = 90/3.6,     # (m/s) maximum car speed \n",
    "                v_min = 50/3.6,      # (m/s) minimum car speed\n",
    "                t_step_DT = 0.5,     # (s) \n",
    "                t_step_DT_2 = 0.5,   # (s)  # move blocked\n",
    "                t_step_Sim = 0.5,    # (s)             #0.25\n",
    "                discount = 0.8,      # discount factor # 0.8\n",
    "                dR_drop = -1e9,      # ?\n",
    "                num_cars = 4,        # number of cars\n",
    "                num_AV = 1,\n",
    "                num_Human =3,\n",
    "                max_episode = 1,     # number of maximum episode\n",
    "                num_lanes =3,        # number of lanes\n",
    "                init_x_range = 30,\n",
    "                episode = 0,\n",
    "                lr = 2.5,\n",
    "                lf = 2.5,\n",
    "                v_target = 95/3.6,\n",
    "                outfile = 'Test.mp4',\n",
    "                plot_fname = 'plot',\n",
    "                plot_format = '.jpg',\n",
    "                outdir = 'Images',\n",
    "                fps = 3,\n",
    "                sim_case = 1,\n",
    "                l_car_safe_fac = 1.1,\n",
    "                w_car_safe_fac = 1.25,\n",
    "                W_l_car_fac = 1.5,\n",
    "                W_w_car_fac = 3)\n",
    "\n",
    "    params.complete_flag = np.zeros((params.max_episode,params.num_cars))\n",
    "    \n",
    "    # Disturbances only in inputs\n",
    "    # Combinations of disturbances = 2^(m)\n",
    "    params.dist_comb = list(itertools.product([-1, 1], repeat=2))\n",
    "\n",
    "    return params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "daf2050f-b0b1-4317-a56e-dc15ca306558",
   "metadata": {},
   "outputs": [],
   "source": [
    "params = get_params()\n",
    "w_lane = params.w_lane\n",
    "v_nominal = params.v_nominal\n",
    "num_cars = params.num_cars\n",
    "l_car = params.l_car \n",
    "w_car = params.w_car\n",
    "max_episode = params.max_episode\n",
    "t_step_DT = params.t_step_DT\n",
    "complete_flag = params.complete_flag\n",
    "AV_cars = np.array([1])\n",
    "params.num_AV = len(AV_cars)\n",
    "num_Human = num_cars - params.num_AV\n",
    "params.num_Human = num_Human\n",
    "num_lanes = params.num_lanes\n",
    "l_road = params.l_road\n",
    "outdir = params.outdir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7cd4e561-c98d-432b-bc78-207075db430b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# num_cars = 5\n",
    "Level_ratio = np.array([[0.2, 0.8]])\n",
    "Level_ratio = np.array([[0.99, 0.01]])\n",
    "Level_ratio = np.matlib.repmat(Level_ratio, num_cars * (num_cars-1), 1)\n",
    "Level_ratio.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9ecb3f6e-ef80-47d8-a5da-5bf73180a3f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_step = 30\n",
    "\n",
    "Level_ratio_history=np.zeros((max_episode, max_step, np.shape(Level_ratio)[0], np.shape(Level_ratio)[1]))\n",
    "R_history = np.zeros((max_episode, num_cars, max_step))\n",
    "\n",
    "# Level_ratio_history\n",
    "R_history[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a8495194-d2ca-4cc0-8969-d78ff8a3e401",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[25.]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.empty(shape=[1,0])\n",
    "asd = np.append(x, [[25]], axis=1 )\n",
    "asd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e4c9910b-a2c3-4500-8246-609a5ec5c965",
   "metadata": {},
   "outputs": [],
   "source": [
    "asd = np.append(asd, [[30]], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fb5de36e-0444-4ffe-95c2-6e6fab84e351",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[25., 30.],\n",
       "       [25., 30.]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ert = np.block([[asd],[asd]])\n",
    "ert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "fbbe2fa7-4185-40ca-b0f7-c3b68a86387a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist_comb = list(itertools.product([-1, 1], repeat=2))\n",
    "len(dist_comb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "96e4fc36-fc2e-4f62-9ba7-7b6214d39e7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "66"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = 33\n",
    "p*=2\n",
    "p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "3e4eec23-3d9b-4fda-8d8d-42546e5b97ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q_value_2_min = [[[[-1e6]] * 9 for i in range(len(dist_comb))] for i in range(9)]\n",
    "len(Q_value_2_min[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2964a6b5-8cd1-4bca-a5fb-7886aabadaf6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-800.0]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q_value_2 = [[-1e6]  for i in range (9)]\n",
    "Q_value_2[0] = list([-1e3 * 0.8])\n",
    "Q_value_2[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "830f0a91-960a-4768-9c87-c055af0c03cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-800.0, -800.0]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Q_value_2[0] = Q_value_2[0] + list([-1e3 * 0.8])\n",
    "Q_value_2[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "7cb0dfd1-ebbc-456a-ba65-8017539755d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-5"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [0 , 10, 20, 30, -5, 7]\n",
    "min(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "89caaafe-51ff-45e7-ad8a-19023c3fbf38",
   "metadata": {},
   "outputs": [],
   "source": [
    "action_id = [[]]*3\n",
    "action_id[0] = list([[0, 2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "3ca8aa81-edf0-4edd-b79c-7462e0b6c7f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0, 2], [3, 4]]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "action_id[0] = action_id[0] + list([[3, 4]])\n",
    "action_id[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "0588f8bf-38d9-4282-89a8-64c4a6904bda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 4]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tesz = action_id[0][1]\n",
    "tesz"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
                                                                                                                                                                                                                                                                                                                                                                                                                 